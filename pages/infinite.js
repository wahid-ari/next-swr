import Head from 'next/head'
import Code from '@components/Code';
import Navbar from '@components/Navbar';
import FullPageLoader from '@components/FullPageLoader';
import { usePaginatePosts } from '@libs/useRequest';

export default function Infinite() {

  const { posts, error, isLoadingMore, size, setSize, isReachingEnd } = usePaginatePosts("/posts")

  if (error) return <div>failed to load</div>
  if (!posts) return <FullPageLoader />

  return (
    <>
      <Head>
        <title>Use SWR Infinite</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="dark:bg-neutral-900 min-h-screen pb-8">

        <Navbar />

        <div className="max-w-5xl px-4 mx-auto pt-4 class">
          <h1 className="dark:text-white text-2xl font-semibold pb-4">Use SWR Infinite</h1>
          <h2 className="dark:text-white text-xl font-semibold">Blog Post</h2>
          <a className="text-blue-500 hover:text-blue-600 transition-all cursor-pointer block mb-4"
            href={`https://jsonplaceholder.typicode.com/posts?_page=${size}&_limit=10`} target="_blank"
            rel="noreferrer">https://jsonplaceholder.typicode.com/posts?_page={size}&_limit=10</a>
          <ol className="space-y-2 list-inside my-4 dark:text-gray-200">
            {posts.map(post => (
              <li key={post.id}>{post.id}. {post.title}</li>
            ))}
          </ol>
          <button
            className="mt-2 bg-blue-500 hover:bg-blue-600 py-1 px-2 text-sm font-medium text-white rounded"
            disabled={isLoadingMore || isReachingEnd}
            onClick={() => setSize(size + 1)}
          >
            {isLoadingMore ? "Loading..." : isReachingEnd ? "No more posts" : "Load more"}
          </button>

          <Code name="libs/useRequest" code={`import useSWRInfinite from 'swr/infinite'
          
const baseUrl = "https://jsonplaceholder.typicode.com"

export function usePaginatePosts(path){
  if (!path) {
    throw new Error("Path is required")
  }

  const url = baseUrl + path
  const PAGE_LIMIT = 10

  const { data, error, size, setSize } = useSWRInfinite(
    index => '\${url}?_page=\${index + 1}&_limit=\${PAGE_LIMIT}',
    fetcher
  )

  const posts = data ? [].concat(...data) : []
  const isLoadingInitialData = !data && !error
  const isLoadingMore = isLoadingInitialData || (size > 0 && data && typeof data[size - 1] === "undefined")
  const isEmpty = data?.[0]?.length === 0
  const isReachingEnd = isEmpty || (data && data[data.length - 1]?.length < PAGE_LIMIT)

  return { posts, error, isLoadingMore, size, setSize, isReachingEnd }
}`} />
          <Code name="pages/infinite" code={`import FullPageLoader from '@components/FullPageLoader';
import { usePaginatePosts } from '@libs/useRequest';

export default function Infinite() {

  const { posts, error, isLoadingMore, size, setSize, isReachingEnd } = usePaginatePosts("/posts")

  if (error) return <div>failed to load</div>
  if (!posts) return <FullPageLoader />

  return (
    <h2>Blog Post</h2>
    <ol>
      {posts.map(post => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ol>
    <button
      disabled={isLoadingMore || isReachingEnd}
      onClick={() => setSize(size + 1)}
    >
      {isLoadingMore ? "Loading..." : isReachingEnd ? "No more posts" : "Load more"}
    </button>
  )
}`} />

        </div>
      </main >
    </>
  )
}
